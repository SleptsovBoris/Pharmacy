// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pharmacy.Domain.data;

#nullable disable

namespace Pharmacy.Domain.Migrations
{
    [DbContext(typeof(PharmacyContext))]
    [Migration("20230521083922_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Pharmacy.Domain.models.Apteka", b =>
                {
                    b.Property<int>("AptekaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AptekaId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AptekaId");

                    b.ToTable("Apteki");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<bool>("IsOrdered")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("Drug")
                        .HasColumnType("int");

                    b.Property<int?>("DrugId")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerOne")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("DrugId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.Drug", b =>
                {
                    b.Property<int>("DrugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrugId"));

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KindId")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Recept")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrugId");

                    b.HasIndex("FormId");

                    b.HasIndex("KindId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.DrugForm", b =>
                {
                    b.Property<int>("FormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormId"));

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormId");

                    b.ToTable("DrugForms");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.DrugKind", b =>
                {
                    b.Property<int>("KindId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KindId"));

                    b.Property<string>("KindName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KindId");

                    b.ToTable("DrugKinds");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.FavorDrug", b =>
                {
                    b.Property<int>("FavorDrugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavorDrugId"));

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FavorDrugId");

                    b.HasIndex("DrugId");

                    b.HasIndex("UserId");

                    b.ToTable("FavorDrugs");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.FavorPharmacy", b =>
                {
                    b.Property<int>("FavorPharmacyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavorPharmacyId"));

                    b.Property<int>("AptekaId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FavorPharmacyId");

                    b.HasIndex("AptekaId");

                    b.HasIndex("UserId");

                    b.ToTable("FavorPharmacies");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManufacturerId"));

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ManufacturerId");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int?>("AptekaId")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderState")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("AptekaId");

                    b.HasIndex("CartId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PaymentSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.PharmacyDrug", b =>
                {
                    b.Property<int>("PharmacyDrugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PharmacyDrugId"));

                    b.Property<int>("AptekaId")
                        .HasColumnType("int");

                    b.Property<int>("DrugId")
                        .HasColumnType("int");

                    b.HasKey("PharmacyDrugId");

                    b.HasIndex("AptekaId");

                    b.HasIndex("DrugId");

                    b.ToTable("PharmacyDrugs");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.Cart", b =>
                {
                    b.HasOne("Pharmacy.Domain.models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.CartItem", b =>
                {
                    b.HasOne("Pharmacy.Domain.models.Cart", null)
                        .WithMany("CartItems")
                        .HasForeignKey("CartId");

                    b.HasOne("Pharmacy.Domain.models.Drug", null)
                        .WithMany("CartItems")
                        .HasForeignKey("DrugId");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.Drug", b =>
                {
                    b.HasOne("Pharmacy.Domain.models.DrugForm", "Form")
                        .WithMany("Drugs")
                        .HasForeignKey("FormId");

                    b.HasOne("Pharmacy.Domain.models.DrugKind", "Kind")
                        .WithMany("Drugs")
                        .HasForeignKey("KindId");

                    b.HasOne("Pharmacy.Domain.models.Manufacturer", "Manufacturer")
                        .WithMany("Drugs")
                        .HasForeignKey("ManufacturerId");

                    b.Navigation("Form");

                    b.Navigation("Kind");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.FavorDrug", b =>
                {
                    b.HasOne("Pharmacy.Domain.models.Drug", null)
                        .WithMany("FavorDrugs")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.models.User", null)
                        .WithMany("FavorDrugs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pharmacy.Domain.models.FavorPharmacy", b =>
                {
                    b.HasOne("Pharmacy.Domain.models.Apteka", null)
                        .WithMany("FavorPharmacies")
                        .HasForeignKey("AptekaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.models.User", null)
                        .WithMany("FavorPharmacies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pharmacy.Domain.models.Order", b =>
                {
                    b.HasOne("Pharmacy.Domain.models.Apteka", null)
                        .WithMany("Orders")
                        .HasForeignKey("AptekaId");

                    b.HasOne("Pharmacy.Domain.models.Cart", "Cart")
                        .WithOne("Order")
                        .HasForeignKey("Pharmacy.Domain.models.Order", "CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("Cart");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.Payment", b =>
                {
                    b.HasOne("Pharmacy.Domain.models.Order", null)
                        .WithOne("Payment")
                        .HasForeignKey("Pharmacy.Domain.models.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.PharmacyDrug", b =>
                {
                    b.HasOne("Pharmacy.Domain.models.Apteka", null)
                        .WithMany("PharmacyDrugs")
                        .HasForeignKey("AptekaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy.Domain.models.Drug", null)
                        .WithMany("PharmacyDrugs")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pharmacy.Domain.models.Apteka", b =>
                {
                    b.Navigation("FavorPharmacies");

                    b.Navigation("Orders");

                    b.Navigation("PharmacyDrugs");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.Cart", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.Drug", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("FavorDrugs");

                    b.Navigation("PharmacyDrugs");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.DrugForm", b =>
                {
                    b.Navigation("Drugs");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.DrugKind", b =>
                {
                    b.Navigation("Drugs");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.Manufacturer", b =>
                {
                    b.Navigation("Drugs");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.Order", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Pharmacy.Domain.models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("FavorDrugs");

                    b.Navigation("FavorPharmacies");

                    b.Navigation("Orders");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
